# Basic workflow
name: build

# Use more columns for terminal output
env:
  COLUMNS: 120
  PYTHONIOENCODING: utf8

# Controls when the action will run
# Workflow begins with push or PR events
# Focuses on the main branch only
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Create jobs
jobs:
  build:
    # Use matrix strategy for different OS
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.12"]
    steps:
      # Checkout the code of the repository
      - name: Check out Repository Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      # Setup Python for the current language version
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      # Install pip
      - name: Install Pip
        run: |
          python -m pip install --upgrade pip
          
      # Install poetry
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.8.3
          
      # Install dependencies
      - name: Install dependencies
        run: |
          poetry install
          
      # Run the linters
      - name: Run Linters
        run: |
          pipx install ruff
          poetry run task lint
          
      # Run the tests
      - name: Run Tests
        run: |
          poetry run task test-not-fuzz

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.3'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
          
      - name: Run tests and generate coverage
        run: |
          poetry run pytest -s --cov=my_package --cov-report json:coverage.json
          
      - name: Generate coverage and version badges
        run: |
          poetry run python badges.py
          
      - name: Commit badge
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add README.md
          git commit -m "Update coverage and version badges"
          git push
