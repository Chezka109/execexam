name: Publish

on:
  release:
    types: [created]

jobs:
  publish:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: poetry/install-poetry@v1
        with:
          version: latest

      - name: Cache Poetry virtualenv
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          if [ ! -f poetry.lock ]; then
            poetry lock
          fi
          poetry install --no-dev

      - name: Verify version from tag
        run: |
          tag_version=${GITHUB_REF##*/v}
          pyproject_version=$(poetry version -s)
          if [ "$tag_version" != "$pyproject_version" ]; then
            echo "Version in pyproject.toml ($pyproject_version) does not match tag version ($tag_version)"
            exit 1
          fi

      - name: Build the package
        run: poetry build

      - name: Check build result
        run: |
          if [ ! -d dist ]; then
            echo "Build failed: dist directory not found"
            exit 1
          fi

      - name: Check for PyPI token
        run: |
          if [ -z "${{ secrets.PYPI_TOKEN }}" ]; then
            echo "PyPI token not set"
            exit 1
          fi

      - name: Publish to PyPI
        run: poetry publish --build
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
